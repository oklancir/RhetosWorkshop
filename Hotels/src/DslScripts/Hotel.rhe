Module Hotels
{
    Entity Hotel
    {
        ShortString Code { AutoCode; }
        ShortString Name;
        ShortString Address;
    }

    Entity Manager 
    {
        ShortString UserName;
        Reference Hotel;
    }

    Entity Room
    {
        ShortString Name;
        Reference RoomType;
        Reference Hotel;
        Reference Manager;   

        RowPermissions
        {
            Allow WithinHotel 'context =>
                {
                    Guid myHotelId = context.Repository.Hotels.Manager.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.Hotel.ID)
                        .SingleOrDefault();
                    return item => item.Hotel.ID == myHotelId;
                }';
        }     
    }

    Entity RoomType 
    {
        ShortString Name;
        Money Price;
    }

    Entity Guest
    {
        Sifarnik;
        ShortString Code { AutoCode; }
        LongString FirstName { Required; }
        LongString LastName { Required; }
        LongString Address { Required; RegExMatch "\d" "Address needs to contain at least one digit."; }
        LongString EmailAddress { Required; }
        LongString PhoneNumber { Required; }

        ItemFilter CommonMisspelling 'item => item.FirstName.Contains("Orzen")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "Orzen"';

        ComposableFilterBy Search '(query, respository, parameter) =>
            {
                if (parameter.Not == true)
                    return query.Where(item => !item.FirstName.Contains(parameter.Pattern));
                else
                    return query.Where(item => item.FirstName.Contains(parameter.Pattern));
            }';
    }

    Parameter Search
    {
        ShortString Pattern;
        Bool Not;
    }

    Action Insert5Guests 
        '(parameter, repository, userInfo) =>
        {
                for (int i=0; i < 5; i++)
                {
                    var newGuest = new Hotels.Guest { FirstName = "Rhetos", LastName = "Guest", Address = "Rhetos Workshop 13", EmailAddress = "rhe@tos.hotel"};
                    repository.Hotels.Guest.Insert(newGuest);
                }
        }';
    
    Action Insert5Rooms 
        '(parameter, repository, userInfo) =>
        {
                for (int i=0; i < 5; i++)
                {
                    var newRoom = new Hotels.Room { Name = "101" };
                    repository.Hotels.Room.Insert(newRoom);
                }
        }';


    Entity Reservation 
    {
        Date StartDate { Required; DefaultValue 'item => DateTime.Now.Date'; }
        Date EndDate { Required; }
        DateTime LastModifiedTime;
        Reference Guest { Required; }
        Reference Room { Required; }
        Decimal Discount;
        Integer ReservationStatus { DefaultValue 'item => 1'; }
        Reference Invoice;
        Reference Hotel;

        ItemFilter EndDateBeforeStartDate 'item => item.EndDate != null && item.EndDate.Value < item.StartDate.Value';
        InvalidData EndDateBeforeStartDate 'It is not allowed to enter EndDate before the StartDate.';

        SaveMethod
        {
            Initialization SetLastModifiedTime
            '
                {
                    // var now = SqlUtility.GetDatabaseTime(_executionContext.SqlExecuter);

                    foreach( var newItem in insertedNew.Concat(updatedNew))
                        newItem.LastModifiedTime = DateTime.Now;
                }
            ';
        }

        RowPermissions
        {
            Allow WithinHotel 'context =>
                {
                    Guid myHotelId = context.Repository.Hotels.Manager.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.Hotel.ID)
                        .SingleOrDefault();
                    return item => item.Hotel.ID == myHotelId;
                }';
        }   

        Logging { AllProperties; }
    }

    Entity Service 
    {
        ShortString Name;
        Money Price;
    }


    Entity Product
    {
        ShortString Name;
        ShortString ProductType;
        Money Price;
    }

    Entity Food 
    {
        Extends Hotels.Product;

        ShortString FoodType;
        Reference Product;
    }   

    Entity ServiceProduct 
    {
        Reference Service;
        Reference Product;
    }

    Entity Invoice
    {
        Date DateCreated { DenyUserEdit; }
        Bool PaymentStatus { DefaultValue 'item => false'; }
        Reference Reservation;
        Reference Item;

        ItemFilter IsPaid 'item => item.PaymentStatus == true';
        Lock IsPaid 'Invoice is paid.';

        Logging { AllProperties; }    
    }

    Entity Item
    {
        ShortString Name;
        Money Price;
        Reference Invoice { Required; }
        Reference ServiceProduct { Required; }
    }

    SqlQueryable RoomInfo
        "
            SELECT
                r.ID,
                NumberOfReservations = COUNT(res.ID)
            FROM
                Room r
                LEFT JOIN Hotels.Reservation res ON res.RoomID = r.ID
            GROUP BY
                r.ID
        "
    {
        Extends Hotels.Room;
        Integer NumberOfReservations;

        AutodetectSqlDependencies;
    }

    Browse RoomGrid Hotels.Room
    {
        Take 'Name';
        Take HotelName 'Hotel.Name';
        Take NumberOfReservations 'Extension_RoomInfo.NumberOfReservations';    
    }   
}